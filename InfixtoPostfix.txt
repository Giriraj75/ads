public class InfixToPostfix {
    
    // Custom stack implementation
    static class Stack {
        private char[] arr;
        private int top;
        private int capacity;

        // Constructor to initialize the stack
        public Stack(int size) {
            arr = new char[size];
            top = -1;
            capacity = size;
        }

        // Push an element onto the stack
        public void push(char ch) {
            if (top == capacity - 1) {
                throw new RuntimeException("Stack Overflow");
            }
            arr[++top] = ch;
        }

        // Pop an element from the stack
        public char pop() {
            if (isEmpty()) {
                throw new RuntimeException("Stack Underflow");
            }
            return arr[top--];
        }

        // Peek the top element of the stack
        public char peek() {
            if (isEmpty()) {
                throw new RuntimeException("Stack Underflow");
            }
            return arr[top];
        }

        // Check if the stack is empty
        public boolean isEmpty() {
            return top == -1;
        }
    }

    // Method to return precedence of operators
    private static int precedence(char op) {
        switch (op) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            default:
                return 0;
        }
    }

    // Method to convert infix to postfix
    public static String infixToPostfix(String expression) {
        StringBuilder postfix = new StringBuilder();
        Stack stack = new Stack(expression.length());

        for (char ch : expression.toCharArray()) {
            // If the character is an operand, add it to output
            if (Character.isLetterOrDigit(ch)) {
                postfix.append(ch);
            } 
            // If the character is '(', push it to the stack
            else if (ch == '(') {
                stack.push(ch);
            } 
            // If the character is ')', pop and output from the stack
            // until an '(' is encountered
            else if (ch == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop(); // Pop '(' from stack
            } 
            // An operator is encountered
            else {
                while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(ch)) {
                    postfix.append(stack.pop());
                }
                stack.push(ch);
            }
        }

        // Pop all the operators from the stack
        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }

        return postfix.toString();
    }

    public static void main(String[] args) {
        String infix = "a-b*c-d/e+f";
        String postfix = infixToPostfix(infix);
        System.out.println("Postfix expression: " + postfix);
    }
}
