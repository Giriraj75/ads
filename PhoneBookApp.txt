import java.util.Scanner;

public class PhoneBookApp {
    public static class Node {
        long phoneNumber;
        String name;
        Node left;
        Node right;

        public Node(String name, long phoneNumber) {
            this.name = name;
            this.phoneNumber = phoneNumber;
        }
    }

    public static class PhoneBook {
        public Node newNode(String name, long phoneNumber) {
            Node newNode = new Node(name, phoneNumber);
            newNode.left = null;
            newNode.right = null;
            return newNode;
        }

        public Node insert(Node node, String name, long phoneNumber) {
            if (node == null) {
                return newNode(name, phoneNumber);
            }
            if (name.compareToIgnoreCase(node.name) < 0) {
                node.left = insert(node.left, name, phoneNumber);
            } else if (name.compareToIgnoreCase(node.name) > 0) {
                node.right = insert(node.right, name, phoneNumber);
            }
            return node;
        }

        public Node search(Node node, String name) {
            if (node == null || name.equalsIgnoreCase(node.name)) {
                return node;
            }
            if (name.compareToIgnoreCase(node.name) < 0) {
                return search(node.left, name);
            }
            return search(node.right, name);
        }

        public Node inorderSuccessor(Node node) {
            while (node.left != null) {
                node = node.left;
            }
            return node;
        }

        public Node delete(Node node, String name) {
            if (node == null) return null;

            if (name.compareToIgnoreCase(node.name) < 0) {
                node.left = delete(node.left, name);
            } else if (name.compareToIgnoreCase(node.name) > 0) {
                node.right = delete(node.right, name);
            } else {
                if (node.left == null && node.right == null) {
                    return null;
                }
                if (node.left == null) {
                    return node.right;
                } else if (node.right == null) {
                    return node.left;
                }
                Node inorderSuccessor = inorderSuccessor(node.right);
                node.phoneNumber = inorderSuccessor.phoneNumber;
                node.name = inorderSuccessor.name;
                node.right = delete(node.right, inorderSuccessor.name);
            }
            return node;
        }

        public Node update(Node node, String name, long newPhoneNumber) {
            Node target = search(node, name);
            if (target != null) {
                target.phoneNumber = newPhoneNumber;
                System.out.println("Contact updated successfully.");
            } else {
                System.out.println("Contact not found.");
            }
            return node;
        }

        public void display(Node root) {
            if (root == null) {
                return;
            }
            display(root.left);
            System.out.println("Name: " + root.name + ", Phone Number: " + root.phoneNumber);
            display(root.right);
        }
    }

    public static void main(String[] args) {
        PhoneBook pb = new PhoneBook();
        Node root = null;
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Add Contact");
            System.out.println("2. Search Contact");
            System.out.println("3. Update Contact");
            System.out.println("4. Delete Contact");
            System.out.println("5. Display All Contacts");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter name: ");
                    scanner.nextLine(); // Consume newline
                    String name = scanner.nextLine();
                    System.out.print("Enter phone number: ");
                    long phoneNumber = scanner.nextLong();
                    root = pb.insert(root, name, phoneNumber);
                    System.out.println("Contact added successfully.");
                    break;

                case 2:
                    System.out.print("Enter name to search: ");
                    scanner.nextLine(); // Consume newline
                    name = scanner.nextLine();
                    Node found = pb.search(root, name);
                    if (found != null) {
                        System.out.println("Contact found - Name: " + found.name + ", Phone Number: " + found.phoneNumber);
                    } else {
                        System.out.println("Contact not found.");
                    }
                    break;

                case 3:
                    System.out.print("Enter name to update: ");
                    scanner.nextLine(); // Consume newline
                    name = scanner.nextLine();
                    System.out.print("Enter new phone number: ");
                    long newPhoneNumber = scanner.nextLong();
                    pb.update(root, name, newPhoneNumber);
                    break;

                case 4:
                    System.out.print("Enter name to delete: ");
                    scanner.nextLine(); // Consume newline
                    name = scanner.nextLine();
                    root = pb.delete(root, name);
                    System.out.println("Contact deleted successfully.");
                    break;

                case 5:
                    System.out.println("Phonebook entries:");
                    pb.display(root);
                    break;

                case 6:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
